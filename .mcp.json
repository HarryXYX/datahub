{
  "mcpServers": {
    "browser-server": {
      "description": "An MCP server that enables AI agents to control web browsers using browser-use.",
      "command": "browser-use-mcp-server",
      "args": [
        "run",
        "server",
        "--port",
        "8000",
        "--stdio",
        "--proxy-port",
        "9000"
      ],
      "env": {
        "OPENAI_API_KEY": "your-api-key"
      }
    },
    "browsermcp": {
      "description": "With Browser MCP, you can use MCP to automate your browser so that AI applications can navigate the web, fill out forms, and more.",
      "command": "npx",
      "args": [
        "@browsermcp/mcp@latest"
      ]
    },
    "browserbase": {
      "description": "This server provides cloud browser automation capabilities using Browserbase and Stagehand. It enables LLMs to interact with web pages, take screenshots, extract information, and perform automated actions with atomic precision.",
      "command": "npx",
      "args": [
        "@browserbasehq/mcp-server-browserbase"
      ],
      "env": {
        "BROWSERBASE_API_KEY": "",
        "BROWSERBASE_PROJECT_ID": "",
        "GEMINI_API_KEY": ""
      }
    },
    "automatalabs-playwright-server": {
      "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright",
      "command": "npx",
      "args": [
        "-y",
        "@automatalabs/mcp-server-playwright"
      ]
    },
    "executeautomation-playwright-server": {
      "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.",
      "command": "npx",
      "args": [
        "-y",
        "@executeautomation/playwright-mcp-server"
      ]
    },
    "playwright-server": {
      "description": "A Model Context Protocol (MCP) server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.",
      "command": "npx",
      "args": [
        "@playwright/mcp@latest"
      ]
    },
    "mysql": {
      "description": "Connect to MySQL databases for direct data access, queries, and database management within Claude Code workflows.",
      "command": "uvx",
      "args": [
        "mcp-server-mysql"
      ],
      "env": {
        "MYSQL_CONNECTION_STRING": "mysql://user:password@localhost:3306/dbname"
      }
    },
    "Neon": {
      "description": "MCP server for interacting with Neon Management API and databases",
      "command": "npx",
      "args": [
        "-y",
        "mcp-remote",
        "https://mcp.neon.tech/mcp"
      ]
    },
    "postgresql": {
      "description": "Connect to PostgreSQL databases for advanced data operations, complex queries, and enterprise database management.",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-postgres"
      ],
      "env": {
        "POSTGRES_CONNECTION_STRING": "postgresql://user:password@localhost:5432/dbname"
      }
    },
    "supabase": {
      "description": "Connect your Claude Code to Supabase using MCP",
      "command": "npx",
      "args": [
        "-y",
        "@supabase/mcp-server-supabase@latest",
        "--read-only",
        "--project-ref=<project-ref>"
      ],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "<personal-access-token>"
      }
    },
    "DeepGraph Next.js MCP": {
      "description": "Deep code analysis and visualization for Next.js projects. Understand component relationships, dependencies, and architecture patterns.",
      "command": "npx",
      "args": [
        "-y",
        "mcp-code-graph@latest",
        "vercel/next.js"
      ]
    },
    "DeepGraph React MCP": {
      "description": "Analyze React component hierarchies, state flows, and dependencies. Visualize your React application architecture.",
      "command": "npx",
      "args": [
        "-y",
        "mcp-code-graph@latest",
        "facebook/react"
      ]
    },
    "DeepGraph TypeScript MCP": {
      "description": "Comprehensive TypeScript code analysis with type mapping, interface relationships, and module dependency tracking.",
      "command": "npx",
      "args": [
        "-y",
        "mcp-code-graph@latest",
        "microsoft/TypeScript"
      ]
    },
    "DeepGraph Vue MCP": {
      "description": "Analyze Vue.js applications including component composition, reactive data flow, and template-script relationships.",
      "command": "npx",
      "args": [
        "-y",
        "mcp-code-graph@latest",
        "vuejs/core"
      ]
    },
    "mcp-server-nia": {
      "descrption": "Nia is a context-augmentation layer for agents, primarily designed for coding agents.",
      "command": "pipx",
      "args": [
        "run",
        "--no-cache",
        "nia-mcp-server"
      ],
      "env": {
        "NIA_API_KEY": "YOUR_API_KEY",
        "NIA_API_URL": "https://apigcp.trynia.ai/"
      }
    },
    "aks": {
      "description": "The AKS-MCP is a Model Context Protocol (MCP) server that enables AI assistants to interact with Azure Kubernetes Service (AKS) clusters. It serves as a bridge between AI tools (like GitHub Copilot, Claude, and other MCP-compatible AI assistants) and AKS, translating natural language requests into AKS operations and returning the results in a format the AI tools can understand.",
      "command": "<path of binary aks-mcp>",
      "args": [
        "--transport",
        "stdio"
      ]
    },
    "mcp-server-box": {
      "description": "The Box MCP Server is a Python project that integrates with the Box API to perform various operations such as file search, text extraction, AI-based querying, and data extraction. It leverages the box-sdk-gen library and provides a set of tools to interact with Box files and folders.",
      "command": "uv",
      "args": [
        "--directory",
        "/path/to/mcp-server-box",
        "run",
        "src/mcp_server_box.py"
      ]
    },
    "chrome-devtools": {
      "description": "A Model Context Protocol server for interacting with Chrome DevTools, enabling browser automation, debugging, and performance analysis capabilities.",
      "command": "npx",
      "args": [
        "-y",
        "chrome-devtools-mcp@latest"
      ]
    },
    "circleci-mcp-server": {
      "description": "Integrate CircleCI build and deployment pipeline management with your Claude Code workflow. Monitor builds, trigger deployments, and access project insights.",
      "command": "npx",
      "args": [
        "-y",
        "@circleci/mcp-server-circleci"
      ],
      "env": {
        "CIRCLECI_TOKEN": "your-circleci-token",
        "CIRCLECI_BASE_URL": "https://circleci.com"
      }
    },
    "codacy": {
      "description": "MCP Server for the Codacy API, enabling access to repositories, files, quality, coverage, security and more.",
      "command": "npx",
      "args": [
        "-y",
        "@codacy/codacy-mcp"
      ],
      "env": {
        "CODACY_ACCOUNT_TOKEN": "<YOUR_TOKEN>"
      }
    },
    "context7": {
      "description": "Context7 MCP pulls up-to-date, version-specific documentation and code examples straight from the source â€” and places them directly into your prompt.",
      "command": "npx",
      "args": [
        "-y",
        "@upstash/context7-mcp"
      ]
    },
    "dynatrace-mcp-server": {
      "description": "Manage and interact with the Dynatrace Platform for real-time observability and monitoring.",
      "command": "npx",
      "args": [
        "-y",
        "@dynatrace-oss/dynatrace-mcp-server@latest"
      ],
      "env": {
        "DT_PLATFORM_TOKEN": "",
        "DT_ENVIRONMENT": ""
      }
    },
    "elasticsearch-mcp-server": {
      "description": "MCP server for connecting to Elasticsearch data and indices. Supports search queries, mappings, ES|QL, and shard information through natural language interactions.",
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "ES_URL",
        "-e",
        "ES_API_KEY",
        "docker.elastic.co/mcp/elasticsearch",
        "stdio"
      ],
      "env": {
        "ES_URL": "<elasticsearch-cluster-url>",
        "ES_API_KEY": "<elasticsearch-API-key>"
      }
    },
    "Figma Dev Mode MCP": {
      "description": "The Dev Mode MCP server brings Figma directly into your workflow by providing important design information and context to AI agents generating code from Figma design files.",
      "url": "http://127.0.0.1:3845/mcp"
    },
    "firecrawl-mcp": {
      "description": "A Model Context Protocol (MCP) server implementation that integrates with Firecrawl for web scraping capabilities.",
      "command": "npx",
      "args": [
        "-y",
        "firecrawl-mcp"
      ],
      "env": {
        "FIRECRAWL_API_KEY": "YOUR-API-KEY"
      }
    },
    "firefly": {
      "description": "Connect to Firefly AI services for advanced AI-powered development assistance, code analysis, and intelligent suggestions directly in your Claude Code environment.",
      "command": "npx",
      "args": [
        "-y",
        "@fireflyai/firefly-mcp"
      ],
      "env": {
        "FIREFLY_ACCESS_KEY": "your_access_key",
        "FIREFLY_SECRET_KEY": "your_secret_key"
      }
    },
    "grafana": {
      "description": "A Model Context Protocol server for interacting with Grafana dashboards and monitoring. Supports both self-hosted Grafana instances and Grafana Cloud.",
      "command": "mcp-grafana",
      "args": [],
      "env": {
        "GRAFANA_URL": "http://localhost:3000",
        "GRAFANA_SERVICE_ACCOUNT_TOKEN": "<your service account token>",
        "GRAFANA_USERNAME": "<your username>",
        "GRAFANA_PASSWORD": "<your password>"
      }
    },
    "huggingface": {
      "description": "Access Hugging Face models, datasets, Spaces, papers, collections via MCP.",
      "url": "https://huggingface.co/mcp",
      "headers": {
        "Authorization": "Bearer <YOUR_HF_TOKEN>"
      }
    },
    "imagesorcery-mcp": {
      "description": "An MCP server providing tools for image processing operations",
      "command": "imagesorcery-mcp",
      "transportType": "stdio",
      "autoApprove": [
        "blur",
        "change_color",
        "config",
        "crop",
        "detect",
        "draw_arrows",
        "draw_circles",
        "draw_lines",
        "draw_rectangles",
        "draw_texts",
        "fill",
        "find",
        "get_metainfo",
        "ocr",
        "overlay",
        "resize",
        "rotate"
      ],
      "timeout": 100
    },
    "ios-simulator": {
      "description": "Control iOS Simulator directly from Claude Code. Launch apps, take screenshots, manage device states, and streamline mobile development workflows.",
      "command": "npx",
      "args": [
        "-y",
        "ios-simulator-mcp"
      ]
    },
    "jfrog": {
      "description": "JFrog MCP Server: providing your agents with direct access to JFrog Platform services.",
      "url": "https://<â€‹â€‹JFROG_PLATFORM_URLâ€‹â€‹>/mcp"
    },
    "just-mcp": {
      "description": "Execute Just commands and task runners seamlessly from Claude Code. Manage project tasks, run build scripts, and automate development workflows with Just integration.",
      "command": "/path/to/just-mcp",
      "args": [
        "--stdio"
      ]
    },
    "LaunchDarkly": {
      "description": "Official LaunchDarkly MCP Server for feature flag management and experimentation. Enables AI agents to interact with LaunchDarkly APIs for managing feature flags, AI configs, targeting rules, and gradual rollouts across multiple environments.",
      "command": "npx",
      "args": [
        "-y",
        "--package",
        "@launchdarkly/mcp-server",
        "--",
        "mcp",
        "start",
        "--api-key",
        "api-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      ]
    },
    "leetcode": {
      "description": "A Model Context Protocol (MCP) server for LeetCode that enables AI assistants to access LeetCode problems, user information, and contest data.",
      "command": "mcp-server-leetcode"
    },
    "logfire": {
      "description": "Provides access to OpenTelemetry traces and metrics through Logfire.",
      "command": "uvx",
      "args": [
        "logfire-mcp@latest",
        "--read-token=YOUR-TOKEN"
      ]
    },
    "markitdown": {
      "description": "Convert various file formats (PDF, Word, Excel, images, audio) to Markdown.",
      "command": "docker",
      "args": [
        "run",
        "--rm",
        "-i",
        "markitdown-mcp:latest"
      ]
    },
    "bitbucket": {
      "description": "A Node.js/TypeScript Model Context Protocol (MCP) server for Atlassian Bitbucket Cloud. Enables AI systems (e.g., LLMs like Claude or Cursor AI) to securely interact with your repositories, pull requests, workspaces, and code in real time.",
      "command": "npx",
      "args": [
        "-y",
        "@aashari/mcp-server-atlassian-bitbucket"
      ]
    },
    "trello": {
      "command": "pnpx",
      "args": [
        "@delorenj/mcp-server-trello"
      ],
      "env": {
        "TRELLO_API_KEY": "your-api-key",
        "TRELLO_TOKEN": "your-token"
      }
    },
    "@microsoft/clarity-mcp-server": {
      "command": "npx",
      "args": [
        "@microsoft/clarity-mcp-server",
        "--clarity_api_token=your-api-token-here"
      ]
    },
    "DevBox": {
      "description": "This server enables natural language interactions for developer-focused operations like managing Dev Boxes, configurations, and pools.",
      "command": "npx",
      "args": [
        "-y",
        "@microsoft/devbox-mcp@latest"
      ]
    },
    "MongoDB": {
      "description": "A Model Context Protocol server to connect to MongoDB databases and MongoDB Atlas Clusters.",
      "command": "npx",
      "args": [
        "-y",
        "mongodb-mcp-server@latest",
        "--readOnly"
      ],
      "env": {
        "MDB_MCP_CONNECTION_STRING": "mongodb://localhost:27017/myDatabase"
      }
    },
    "postman-api-http-server": {
      "description": "Postman's MCP server connects AI agents, assistants, and chatbots directly to your APIs on Postman. Use natural language to prompt AI to automate work across your Postman collections, environments, workspaces, and more.",
      "type": "http",
      "url": "https://mcp.postman.com/{minimal | mcp}",
      "headers": {
        "Authorization": "Bearer ${input:postman-api-key}"
      }
    },
    "pulumi": {
      "description": "The Pulumi Model Context Protocol (MCP) server enables advanced Infrastructure as Code development capabilities for connected agents, providing tools for cloud resource discovery and management using Pulumi Cloud and the Pulumi CLI.",
      "command": "npx",
      "args": [
        "-y",
        "@pulumi/mcp-server@latest",
        "stdio"
      ]
    },
    "sentry": {
      "description": "This service implements the Model Context Protocol (MCP) for interacting with Sentry, focused on human-in-the-loop coding agents and developer workflows rather than general-purpose API access.",
      "url": "https://mcp.sentry.dev/mcp"
    },
    "serena": {
      "description": "Semantic code retrieval & editing tools for coding agents.",
      "command": "/abs/path/to/uv",
      "args": [
        "run",
        "--directory",
        "/abs/path/to/serena",
        "serena",
        "start-mcp-server"
      ]
    },
    "stripe": {
      "description": "Let your AI agents interact with the Stripe API by using our MCP server.",
      "command": "npx",
      "args": [
        "-y",
        "@stripe/mcp",
        "--tools=all"
      ],
      "env": {
        "STRIPE_SECRET_KEY": "your_stripe_secret_key_here"
      }
    },
    "terraform": {
      "description": "The Terraform MCP Server is a Model Context Protocol (MCP) server that provides seamless integration with Terraform Registry APIs, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development.",
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--rm",
        "hashicorp/terraform-mcp-server:0.2.3"
      ]
    },
    "TestSprite": {
      "description": "TestSpriteâ€™s MCP reads your intent, tests your code, and tells you what to fix.",
      "command": "npx",
      "args": [
        "@testsprite/testsprite-mcp@latest"
      ],
      "env": {
        "API_KEY": "your-api-key"
      }
    },
    "webflow": {
      "description": "Enable AI agents to interact with Webflow APIs.",
      "command": "npx mcp-remote https://mcp.webflow.com/sse"
    },
    "filesystem": {
      "description": "Secure filesystem access for Claude Code with configurable directory permissions and file operations.",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/path/to/allowed/files"
      ]
    },
    "github": {
      "description": "Direct GitHub API integration for repository management, issue tracking, pull requests, and collaborative development workflows.",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
      }
    },
    "memory": {
      "description": "Persistent memory and context management for Claude Code sessions. Store and recall information across conversations and projects.",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ]
    },
    "fb-ads-mcp-server": {
      "description": "This project provides an MCP server acting as an interface to the Meta Ads, enabling programmatic access to Meta Ads data and management features.",
      "command": "python",
      "args": [
        "/path/to/your/fb-ads-mcp-server/server.py",
        "--fb-token",
        "YOUR_META_ACCESS_TOKEN"
      ]
    },
    "google-ads": {
      "description": "A FastMCP-powered Model Context Protocol server for Google Ads API integration with automatic OAuth 2.0 authentication",
      "command": "/full/path/to/your/project/.venv/bin/python",
      "args": [
        "/full/path/to/your/project/server.py"
      ]
    },
    "monday-api-mcp": {
      "description": "Enable AI agents to operate reliably within real workflows. This MCP is monday.com's open framework for connecting agents into your work OS - giving them secure access to structured data, tools to take action, and the context needed to make smart decisions.",
      "command": "npx",
      "args": [
        "@mondaydotcomorg/monday-api-mcp",
        "-t",
        "your_monday_api_token"
      ],
      "env": {}
    },
    "notionApi": {
      "description": "Official MCP server for Notion API",
      "command": "npx",
      "args": [
        "-y",
        "@notionhq/notion-mcp-server"
      ],
      "env": {
        "NOTION_TOKEN": "ntn_****"
      }
    },
    "fetch": {
      "description": "Web content fetching and data extraction capabilities. Access external APIs, scrape web content, and integrate external data sources.",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-fetch"
      ]
    }
  }
}
